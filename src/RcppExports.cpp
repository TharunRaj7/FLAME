// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// call_matching
List call_matching(int cov_to_drop, DataFrame data, bool replace, IntegerVector covs);
RcppExport SEXP _FLAME_call_matching(SEXP cov_to_dropSEXP, SEXP dataSEXP, SEXP replaceSEXP, SEXP covsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cov_to_drop(cov_to_dropSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type covs(covsSEXP);
    rcpp_result_gen = Rcpp::wrap(call_matching(cov_to_drop, data, replace, covs));
    return rcpp_result_gen;
END_RCPP
}
// get_BF
List get_BF(int cov_to_drop, DataFrame data, bool replace, IntegerVector covs);
RcppExport SEXP _FLAME_get_BF(SEXP cov_to_dropSEXP, SEXP dataSEXP, SEXP replaceSEXP, SEXP covsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cov_to_drop(cov_to_dropSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type covs(covsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_BF(cov_to_drop, data, replace, covs));
    return rcpp_result_gen;
END_RCPP
}
// get_PE
double get_PE(int cov_to_drop, IntegerVector covs, List holdout, String PE_method, SEXP user_PE_fit, List user_PE_fit_params, SEXP user_PE_predict, List user_PE_predict_params);
RcppExport SEXP _FLAME_get_PE(SEXP cov_to_dropSEXP, SEXP covsSEXP, SEXP holdoutSEXP, SEXP PE_methodSEXP, SEXP user_PE_fitSEXP, SEXP user_PE_fit_paramsSEXP, SEXP user_PE_predictSEXP, SEXP user_PE_predict_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cov_to_drop(cov_to_dropSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type covs(covsSEXP);
    Rcpp::traits::input_parameter< List >::type holdout(holdoutSEXP);
    Rcpp::traits::input_parameter< String >::type PE_method(PE_methodSEXP);
    Rcpp::traits::input_parameter< SEXP >::type user_PE_fit(user_PE_fitSEXP);
    Rcpp::traits::input_parameter< List >::type user_PE_fit_params(user_PE_fit_paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type user_PE_predict(user_PE_predictSEXP);
    Rcpp::traits::input_parameter< List >::type user_PE_predict_params(user_PE_predict_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_PE(cov_to_drop, covs, holdout, PE_method, user_PE_fit, user_PE_fit_params, user_PE_predict, user_PE_predict_params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FLAME_call_matching", (DL_FUNC) &_FLAME_call_matching, 4},
    {"_FLAME_get_BF", (DL_FUNC) &_FLAME_get_BF, 4},
    {"_FLAME_get_PE", (DL_FUNC) &_FLAME_get_PE, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_FLAME(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
